
function make_radio(div, question, choices) {
  $("<p>")
  .css('margin-top', 20)
  .html(question)
  .appendTo(div)

  let name = ('R' + Math.random()).replace('.', '')
  $('<div>')
  .html(choices.map(choice => `
    <input type="radio" id="${choice}" name="${name}" value="${choice}">
    <label for="${choice}">${choice}</label>
  `).join('\n'))
  .appendTo(div)
  console.log('radio name', name)
  return () => $(`input[name=${name}]:checked`).val()
}

function make_text(div, question, opts={}) {
      let {height=50, width='80%'} = opts
      $("<p>")
      .css('margin-top', 20)
      .html(question)
      .appendTo(div)

      let text = $('<textarea>')
      .css({
        margin: '10px 10%',
        padding: '10px',
        width,
        height
      })
      .appendTo(div)
      .focus()

      return () => text.val()
}

/*
Example:

make_slider({
  value: 0,
  min: -10,
  max: 10,
  step: 1,
  labels: {
    terrible: -10,
    amazing: 10,
    neutral: 0
  }
}).appendTo(display)
*/
function make_slider(opt) {
  let slider = $("<div>")
  .css('margin', '60px')
  .slider(opt)
  for (let [lab, val] of Object.entries(opt.labels)) {
    let pos = (val - opt.min) / (opt.max - opt.min)
    console.log(`${100 * pos}%`)
    $(`<label>${lab}</label>`)
    .css({
      'position': 'absolute',
      'left': `${100 * pos}%`,
      'text-align': 'center',
      'width': '100px',
      'transform': 'translate(-50%, 100%)',
    })
    .appendTo(slider)
  }
  return slider
}

/*
Usage: await make_button(display, "Submit")
*/

function make_button(div, text) {
  let container = $('<div>')
  .css('text-align', 'center')
  .appendTo(div)
  let btn = $('<button>', {class: 'btn btn-primary'})
  .text(text)
  .appendTo(container)
  return new Promise(function(resolve) {
    btn.click(() => {
      btn.prop('disabled', true)
      sleep(1000).then(resolve)
    })
  })
}

async function make_buttons(div, texts, opts={}) {
  container = $('<div>')
  .css('text-align', 'center')
  .appendTo(div)
  opts.cls = 'btn btn-primary'
  let buttons = texts.map(t => make_button(container, t, opts))
  let prom = Promise.any(buttons)
  if (opts.remove_after) {
    prom.then(() => container.remove())
  }
  return prom
}


function updateExisting(target, src) {
  Object.keys(target)
        .forEach(k => target[k] = (src.hasOwnProperty(k) ? src[k] : target[k]));
}

function maybeJson(s) {
  try {
    return JSON.parse(s);
  } catch (error) {
    return s;
  }
};

function getKeyPress(options) {
  return new Promise(function(resolve) {
    return jsPsych.pluginAPI.getKeyboardResponse({
      valid_responses: options,
      persist: false,
      allow_held_key: false,
      callback_function: (info) => {
        info.key = String.fromCharCode(info.key);
        if (info.key == ' ') {
          info.key = 'space';
        }
        return resolve(info);
      }
    });
  });
};

// Generated by CoffeeScript 2.0.2
var assert, check, checkObj, converter, delay, mapObject, markdown, mean, sleep, zip;

converter = new showdown.Converter();

markdown = function(txt) {
  // Remove leading spaces so as not to interpret indented
  // blocks as code blocks. Use fenced code blocks instead.
  return converter.makeHtml(txt.replace(/^[ ]+/gm, ''));
};

delay = function(time, func) {
  return setTimeout(func, time);
};

sleep = function(ms) {
  return new Promise(function(resolve) {
    return window.setTimeout(resolve, ms);
  });
};

zip = function(...rows) {
  return rows[0].map(function(_, c) {
    return rows.map(function(row) {
      return row[c];
    });
  });
};

mapObject = function(obj, fn) {
  return Object.keys(obj).reduce(function(res, key) {
    res[key] = fn(obj[key]);
    return res;
  }, {});
};

mean = function(xs) {
  return (xs.reduce((function(acc, x) {
    return acc + x;
  }))) / xs.length;
};

checkObj = function(obj, keys) {
  var i, k, len;
  if (keys == null) {
    keys = Object.keys(obj);
  }
  for (i = 0, len = keys.length; i < len; i++) {
    k = keys[i];
    if (obj[k] === void 0) {
      console.log('Bad Object: ', obj);
      throw new Error(`${k} is undefined`);
    }
  }
  return obj;
};

check = function(name, val) {
  if (val === void 0) {
    throw new Error(`${name}is undefined`);
  }
  return val;
};

assert = function(val) {
  if (!val) {
    throw new Error('Assertion Error');
  }
  return val;
};
